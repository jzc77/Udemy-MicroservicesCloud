logging.level.org.springframework=info

# Actuator endpoint
management.endpoints.web.exposure.include=*
management.endpoint.env.show-values=ALWAYS

# Enable H2 Console
spring.h2.console.enabled=true

# Configuring a static URL to access H2 database
# spring.datasource.url=jdbc:h2:mem:testdb  # commented out to connect to MySQL database instead (see below)

# data.sql is getting executed before tables are created in H2 database, so we need to delay it
spring.jpa.defer-datasource-initialization=true

# Show SQL queries in console when running the application
spring.jpa.show-sql=true

# Connect to MySQL database
spring.datasource.url=jdbc:mysql://localhost:3306/social-media-database
spring.datasource.username=social-media-user
spring.datasource.password=dummypassword

# Get SpringBoot autoconfiguration to create all the tables for us based on the entities that are present
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Docker command
    # docker run --detach
    # --env MYSQL_ROOT_PASSWORD=dummypassword
    # --env MYSQL_USER=social-media-user
    # --env MYSQL_PASSWORD=dummypassword
    # --env MYSQL_DATABASE=social-media-database
    # --name mysql
    # --publish 3306:3306
    # mysql:8-oracle

# Command line command to connect to MySQL database
    # \connect social-media-user@localhost:3306

# Configuring Spring Security authorization information
# (Need to put these in Authorization Headers in Postman)
spring.security.user.name=username
spring.security.user.password=password